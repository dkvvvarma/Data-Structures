// Binary Search Tree operations in C
#include <stdio.h>
#include <stdlib.h>
struct node {
int key;
struct node *left, *right;
};
struct node *newNode(int item) {
struct node *new = (struct node *)malloc(sizeof(struct node));
new->key = item;

new->left = new->right = NULL;
return new;
}
// Inorder Traversal
void inorder(struct node *root) {
if (root != NULL) {
inorder(root->left);

printf("%d -> ", root->key);
inorder(root->right);
}
}

struct node *insert(struct node *node, int key) {
if (node == NULL) return newNode(key);
if (key < node->key)
node->left = insert(node->left, key);
else
node->right = insert(node->right, key);
return node;
}

struct node *minValueNode(struct node *node) {
struct node *current = node;
while (current && current->left != NULL)
current = current->left;
return current;
}

struct node *deleteNode(struct node *root, int key) {
if (root == NULL) return root;

if (key < root->key)

root->left = deleteNode(root->left, key);
else if (key > root->key)
root->right = deleteNode(root->right, key);
else {
if (root->left == NULL) {
struct node *temp = root->right;
free(root);
return temp;
} else if (root->right == NULL) {
struct node *temp = root->left;
free(root);
return temp;
}

struct node *temp = minValueNode(root->right);

root->key = temp->key;

root->right = deleteNode(root->right, temp->key);
}
return root;
}

int main() {
struct node *root = NULL;
root = insert(root, 35);
root = insert(root, 354);
root = insert(root, 343);
root = insert(root, 32);
root = insert(root, 332);
root = insert(root, 243);
root = insert(root, 124);
root = insert(root, 423);
printf("Inorder traversal: ");
inorder(root);
printf("\nAfter deleting\n");
root = deleteNode(root, 32); //here i am deleting first node
printf("Inorder traversal: ");
inorder(root);

}